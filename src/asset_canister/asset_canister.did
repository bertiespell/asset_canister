type FileId = nat64;
type ChunkID = nat64;

type File = record {
    "id": FileId;
    "chunk_ids": vec ChunkID;
    "number_of_chunks": nat64;
    "file_name": text;
    "file_type": text;
    "owner": principal;
    "metadata": text;
    "url": text;
    "created_at": nat64;
    "updated_at": nat64;
};

type FileChunk = record {
    "id": ChunkID;
    "file_id": FileId;
    "chunk_data": blob;
    "order_id": nat64;
    "updated_at": nat64;
};

type CanisterInfo = record {
    "heap_memory_size": nat64;
    "memory_size": nat64;
    "cycles": nat64;
};

type UserInfo = record {
    "number_of_images": nat64;
    "blocked": bool;
};

type Warning = record {
    "number": int;
    "principal": principal;
};

service : {
    "create_file": (blob, text, nat64, text) -> (variant { Ok: File; Err: text });
    "delete_file": (FileId) -> (variant { Ok: File; Err: text });
    "put_chunk": (FileId, blob, nat64) -> (variant { Ok: File; Err: text });
    "get_chunk_by_id": (ChunkID) -> (variant { Ok: FileChunk; Err: text });

    "get_files": () -> (variant { Ok: vec File; Err: text });
    "get_file_by_id": (FileId) -> (variant { Ok: File; Err: text }) query;

    // admin
    "canister_storage_ok": () -> (variant { Ok: nat64; Err: text }) query;
    "collect_metrics": () -> (variant { Ok: CanisterInfo; Err: text });
    "block_user": (principal) -> (variant { Ok: text; Err: text });
    "block_and_delete": (principal) -> (variant { Ok: text; Err: text });
    "unblock_user": (principal) -> (variant { Ok: text; Err: text });
    "get_warnings": () -> (variant { Ok: vec Warning; Err: text }) query;
    "get_blocked_users": () -> (variant { Ok: vec principal; Err: text }) query;
    "get_current_file_id": () -> (variant { Ok: nat64; Err: text }) query;
    "prune_file": (blob, text, nat64, text, principal) -> (variant { Ok: File; Err: text });
}